[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-28 17:48:41.574137",
  "module": "Lsc Api",
  "name": "Create Session Event",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Cases Session",
  "script": "def create_event_on_cases_session(doc):\r\n    try:\r\n        # Ensure session_time and session_end_time are in the format 'HH:MM AM/PM'\r\n        session_start_time = doc.session_time\r\n        session_end_time = doc.session_end_time\r\n\r\n        # Convert session_start_time to 24-hour format\r\n        try:\r\n            start_time_str = session_start_time.strip().upper()\r\n            start_period = start_time_str[-2:]\r\n            start_time_parts = start_time_str[:-2].strip().split(':')\r\n            if len(start_time_parts) != 2:\r\n                raise ValueError(f\"Invalid time format: {start_time_str}\")\r\n            start_hour = int(start_time_parts[0])\r\n            start_minute = int(start_time_parts[1])\r\n            if start_period == \"AM\":\r\n                if start_hour == 12:\r\n                    start_hour = 0\r\n            elif start_period == \"PM\":\r\n                if start_hour != 12:\r\n                    start_hour += 12\r\n            else:\r\n                raise ValueError(f\"Invalid period in time: {start_time_str}\")\r\n            start_time_24 = f\"{start_hour:02}:{start_minute:02}\"\r\n        except Exception as e:\r\n            raise ValueError(f\"Error converting start time {session_start_time}: {str(e)}\")\r\n\r\n        # Convert session_end_time to 24-hour format\r\n        try:\r\n            end_time_str = session_end_time.strip().upper()\r\n            end_period = end_time_str[-2:]\r\n            end_time_parts = end_time_str[:-2].strip().split(':')\r\n            if len(end_time_parts) != 2:\r\n                raise ValueError(f\"Invalid time format: {end_time_str}\")\r\n            end_hour = int(end_time_parts[0])\r\n            end_minute = int(end_time_parts[1])\r\n            if end_period == \"AM\":\r\n                if end_hour == 12:\r\n                    end_hour = 0\r\n            elif end_period == \"PM\":\r\n                if end_hour != 12:\r\n                    end_hour = end_hour + 12\r\n            else:\r\n                raise ValueError(f\"Invalid period in time: {end_time_str}\")\r\n            end_time_24 = f\"{end_hour:02}:{end_minute:02}\"\r\n        except Exception as e:\r\n            frappe.msgprint(f\"End time conversion error details: period: {end_period}, parts: {end_time_parts}\")\r\n            raise ValueError(f\"Error converting end time {session_end_time}: {str(e)}\")\r\n\r\n        # Combine session_date and session_start_time, session_end_time into datetime format\r\n        starts_on = f\"{doc.session_date} {start_time_24}\"\r\n        ends_on = f\"{doc.session_date} {end_time_24}\"\r\n\r\n        # Create a new Event document\r\n        event = frappe.get_doc({\r\n            \"doctype\": \"Event\",\r\n            \"subject\": doc.case_name,\r\n            \"custom_session_type\": \"Session\",\r\n            \"custom_client_transaction\": doc.client_transaction,\r\n            \"starts_on\": starts_on,\r\n            \"ends_on\": ends_on\r\n        })\r\n\r\n        # Insert the new Event document into the database\r\n        event.insert(ignore_permissions=True)\r\n\r\n        # Create an Event Participants entry\r\n        event_participant = frappe.get_doc({\r\n            \"doctype\": \"Event Participants\",\r\n            \"reference_doctype\": \"Employee\",\r\n            \"reference_docname\": doc.lawyer_name,\r\n            \"parent\": event.name,\r\n            \"parentfield\": \"event_participants\",\r\n            \"parenttype\": \"Event\"\r\n        })\r\n\r\n        # Insert the Event Participants entry into the database\r\n        event_participant.insert(ignore_permissions=True)\r\n\r\n        # Log success message\r\n        frappe.msgprint(f\"Event created successfully for Case: {doc.case_name}\")\r\n\r\n    except Exception as e:\r\n        # Log error message\r\n        frappe.log_error(message=f\"Error creating event. Error: {str(e)}\", title=\"Event Creation Error\")\r\n        frappe.msgprint(f\"Error creating event: {str(e)}\")\r\n\r\n# The function create_event_on_cases_session will be called automatically after a new Cases Session is inserted\r\ncreate_event_on_cases_session(doc)\r\n\r\n# # Import necessary modules using standard import statements\r\n# def create_event_on_cases_session(doc):\r\n#     try:\r\n#         # Ensure session_time and session_end_time are in the format 'HH:MM AM/PM'\r\n#         session_start_time = doc.session_time\r\n#         session_end_time = doc.session_end_time\r\n\r\n#         # Function to convert 12-hour format to 24-hour format\r\n#         def convert_to_24_hour(time_str):\r\n#             if 'AM' in time_str.upper():\r\n#                 if time_str[:2] == '12':\r\n#                     return '00' + time_str[2:-3]\r\n#                 else:\r\n#                     return time_str[:-3]\r\n#             else:\r\n#                 if time_str[:2] == '12':\r\n#                     return time_str[:-3]\r\n#                 else:\r\n#                     return str(int(time_str[:2]) + 12) + time_str[2:-3]\r\n\r\n#         # Convert session_start_time and session_end_time to 24-hour format\r\n#         start_time_24 = convert_to_24_hour(session_start_time)\r\n#         end_time_24 = convert_to_24_hour(session_end_time)\r\n\r\n#         # Combine session_date and session_start_time, session_end_time into datetime format\r\n#         starts_on = f\"{doc.session_date} {start_time_24}\"\r\n#         ends_on = f\"{doc.session_date} {end_time_24}\"\r\n\r\n#         # Create a new Event document\r\n#         event = frappe.get_doc({\r\n#             \"doctype\": \"Event\",\r\n#             \"subject\": doc.case_name,\r\n#             \"custom_session_type\": \"Session\",\r\n#             \"custom_client_transaction\": doc.client_transaction,\r\n#             \"starts_on\": starts_on,\r\n#             \"ends_on\": ends_on\r\n#         })\r\n\r\n#         # Insert the new Event document into the database\r\n#         event.insert(ignore_permissions=True)\r\n\r\n#         # Create an Event Participants entry\r\n#         event_participant = frappe.get_doc({\r\n#             \"doctype\": \"Event Participants\",\r\n#             \"reference_doctype\": \"Employee\",\r\n#             \"reference_docname\": doc.lawyer_name,\r\n#             \"parent\": event.name,\r\n#             \"parentfield\": \"event_participants\",\r\n#             \"parenttype\": \"Event\"\r\n#         })\r\n\r\n#         # Insert the Event Participants entry into the database\r\n#         event_participant.insert(ignore_permissions=True)\r\n\r\n#         # Log success message\r\n#         frappe.msgprint(f\"Event created successfully for Case: {doc.case_name}\")\r\n\r\n#     except Exception as e:\r\n#         # Log error message\r\n#         frappe.log_error(message=f\"Error creating event. Error: {str(e)}\", title=\"Event Creation Error\")\r\n#         frappe.msgprint(f\"Error creating event: {str(e)}\")\r\n\r\n\r\n# # The function create_event_on_cases_session will be called automatically after a new Cases Session is inserted\r\n\r\n# create_event_on_cases_session(doc)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-28 17:48:41.615201",
  "module": "Lsc Api",
  "name": "Create Consultation Event",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Consultations",
  "script": "def create_event_on_consultations(doc):\n    try:\n\n        # Get the event data from the new consultations consultation document\n        consultation = doc.client_transaction\n        consultation_date = doc.date\n        consultation_start_time = doc.start_time\n        consultation_end_time = doc.end_time\n\n        # Fetch the client transaction document to get the employee\n        client_transaction_doc = frappe.get_doc('Client Transactions', consultation)\n        employee_name = client_transaction_doc.employee\n\n        # Convert consultation_start_time to 24-hour format\n        try:\n            start_time_str = consultation_start_time.strip().upper()\n            start_period = start_time_str[-2:]\n            start_time_parts = start_time_str[:-2].strip().split(':')\n            if len(start_time_parts) != 2:\n                raise ValueError(f\"Invalid time format: {start_time_str}\")\n            start_hour = int(start_time_parts[0])\n            start_minute = int(start_time_parts[1])\n            if start_period == \"AM\":\n                if start_hour == 12:\n                    start_hour = 0\n            elif start_period == \"PM\":\n                if start_hour != 12:\n                    start_hour += 12\n            else:\n                raise ValueError(f\"Invalid period in time: {start_time_str}\")\n            start_time_24 = f\"{start_hour:02}:{start_minute:02}\"\n        except Exception as e:\n            raise ValueError(f\"Error converting start time {consultation_start_time}: {str(e)}\")\n\n        # Convert consultation_end_time to 24-hour format\n        try:\n            end_time_str = consultation_end_time.strip().upper()\n            end_period = end_time_str[-2:]\n            end_time_parts = end_time_str[:-2].strip().split(':')\n            if len(end_time_parts) != 2:\n                raise ValueError(f\"Invalid time format: {end_time_str}\")\n            end_hour = int(end_time_parts[0])\n            end_minute = int(end_time_parts[1])\n            if end_period == \"AM\":\n                if end_hour == 12:\n                    end_hour = 0\n            elif end_period == \"PM\":\n                if end_hour != 12:\n                    end_hour = end_hour + 12\n            else:\n                raise ValueError(f\"Invalid period in time: {end_time_str}\")\n            end_time_24 = f\"{end_hour:02}:{end_minute:02}\"\n        except Exception as e:\n            frappe.msgprint(f\"End time conversion error details: period: {end_period}, parts: {end_time_parts}\")\n            raise ValueError(f\"Error converting end time {consultation_end_time}: {str(e)}\")\n\n        # Combine consultation_date and consultation_start_time, consultation_end_time into datetime format\n        starts_on = f\"{consultation_date} {start_time_24}\"\n        ends_on = f\"{consultation_date} {end_time_24}\"\n\n        # Create a new Event document\n        event = frappe.get_doc({\n            \"doctype\": \"Event\",\n            \"subject\": consultation,\n            \"custom_session_type\": \"Consultation\",\n            \"custom_client_transaction\": consultation,\n            \"starts_on\": starts_on,\n            \"ends_on\": ends_on\n        })\n\n        # Insert the new Event document into the database\n        event.insert()\n\n        # Create an Event Participants entry\n        event_participant = frappe.get_doc({\n            \"doctype\": \"Event Participants\",\n            \"reference_doctype\": \"Employee\",\n            \"reference_docname\": employee_name,\n            \"parent\": event.name,\n            \"parentfield\": \"event_participants\",\n            \"parenttype\": \"Event\"\n        })\n\n        # Insert the Event Participants entry into the database\n        event_participant.insert()\n\n        # Log success message\n        frappe.msgprint(f\"Event created successfully for consultation: {consultation}\")\n\n    except Exception as e:\n        # Log error message\n        frappe.log_error(message=f\"Error creating event. Error: {str(e)}\", title=\"Event Creation Error\")\n        frappe.msgprint(f\"Error creating event: {str(e)}\")\n\n# The function create_event_on_consultations will be called automatically after a new consultations consultation is inserted\ncreate_event_on_consultations(doc)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-09-03 01:31:14.936715",
  "module": "Lsc Api",
  "name": "create invoice only upon subscription",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Subscription",
  "script": "# def create_invoice_on_subscription(doc):\r\n#     try:\r\n#         # Get the invoice data from the new subscriptions Session document\r\n#         subscription_client = doc.party\r\n        \r\n#         if doc.plans:\r\n#             items = []\r\n#             for plan in doc.plans:\r\n#                 items.append({\r\n#                     \"item_code\": plan.plan,  # Assuming 'plan' field in 'plans' contains item code\r\n#                     \"qty\": plan.qty\r\n#                 })\r\n#         else:\r\n#             frappe.msgprint(\"No plans found in the subscription.\")\r\n#             return\r\n\r\n#         # Create a new Sales Invoice document\r\n#         invoice = frappe.get_doc({\r\n#             \"doctype\": \"Sales Invoice\",\r\n#             \"customer\": subscription_client,\r\n#             \"items\": items\r\n#         })\r\n\r\n#         # Insert the new Sales Invoice document into the database\r\n#         invoice.insert()\r\n#         # Submit the invoice if needed\r\n#         invoice.submit()\r\n\r\n#         # Log success message\r\n#         frappe.msgprint(f\"Sales Invoice created successfully for subscription: {doc.name}\")\r\n\r\n#     except Exception as e:\r\n#         # Log error message\r\n#         frappe.log_error(message=f\"Error creating invoice. Error: {str(e)}\", title=\"Sales Invoice Creation Error\")\r\n#         frappe.msgprint(f\"Error creating invoice: {str(e)}\")\r\n\r\n# # The function create_invoice_on_subscriptions_session will be called automatically after a new subscriptions Session is inserted\r\n\r\n# create_invoice_on_subscription(doc)\r\n\r\n\r\ndef create_invoice_on_subscription(doc):\r\n    try:\r\n        # Get the invoice data from the new subscriptions Session document\r\n        subscription_client = doc.party\r\n        \r\n        if doc.plans:\r\n            items = []\r\n            for plan in doc.plans:\r\n                items.append({\r\n                    \"item_code\": plan.plan,  # Assuming 'plan' field in 'plans' contains item code\r\n                    \"qty\": plan.qty\r\n                })\r\n        else:\r\n            frappe.msgprint(\"No plans found in the subscription.\")\r\n            return\r\n\r\n        # Create a new Sales Invoice document\r\n        invoice = frappe.get_doc({\r\n            \"doctype\": \"Sales Invoice\",\r\n            \"customer\": subscription_client,\r\n            \"items\": items\r\n        })\r\n\r\n        # Insert the new Sales Invoice document into the database\r\n        invoice.insert()\r\n        # Submit the invoice if needed\r\n        invoice.submit()\r\n        \r\n        doc.custom_sales_invoice = invoice.name\r\n        doc.save()\r\n        \r\n\r\n        # # Log success message\r\n        frappe.msgprint(f\"Sales Invoice {invoice.name} created successfully for subscription: {doc.name}\")\r\n\r\n        # # Create a Payment Entry to mark the invoice as paid\r\n        # payment_entry = frappe.get_doc({\r\n        #     \"doctype\": \"Payment Entry\",\r\n        #     \"payment_type\": \"Receive\",\r\n        #     \"party_type\": \"Customer\",\r\n        #     \"party\": subscription_client,\r\n        #     \"posting_date\": frappe.utils.nowdate(),\r\n        #     \"mode_of_payment\": \"نقد\",  # You can change this to the appropriate mode of payment\r\n        #     \"paid_amount\": invoice.outstanding_amount,\r\n        #     \"received_amount\": invoice.outstanding_amount,\r\n        #     \"paid_to\": \"1110 - النقدية في الخزينة - LSC\",  # Replace with your receivable account\r\n        #     \"references\": [\r\n        #         {\r\n        #             \"reference_doctype\": \"Sales Invoice\",\r\n        #             \"reference_name\": invoice.name,\r\n        #             \"total_amount\": invoice.grand_total,\r\n        #             \"outstanding_amount\": invoice.outstanding_amount,\r\n        #             \"allocated_amount\": invoice.outstanding_amount\r\n        #         }\r\n        #     ],\r\n        #     \"remarks\": f\"Payment against Sales Invoice: {invoice.name}\"\r\n        # })\r\n\r\n        # # Insert the new Payment Entry document into the database\r\n        # payment_entry.insert()\r\n        # # Submit the Payment Entry to finalize the payment\r\n        # payment_entry.submit()\r\n\r\n        # # Log success message for payment entry\r\n        # frappe.msgprint(f\"Payment Entry created and submitted successfully for Sales Invoice: {invoice.name}\")\r\n\r\n    except Exception as e:\r\n        # Log error message\r\n        frappe.log_error(message=f\"Error creating invoice or payment entry. Error: {str(e)}\", title=\"Sales Invoice and Payment Entry Creation Error\")\r\n        frappe.msgprint(f\"Error creating invoice or payment entry: {str(e)}\")\r\n\r\n# The function create_invoice_on_subscriptions_session will be called automatically after a new subscriptions Session is inserted\r\n\r\ncreate_invoice_on_subscription(doc)\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-28 17:48:41.495228",
  "module": "Lsc Api",
  "name": "Add custom_quota to Subscription",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Subscription",
  "script": "\n\ndef add_quota_to_subscription(doc):\n    try:\n        # Check if quota has already been added by using a custom field in the document\n        try:\n            if doc.quota_added:\n                # frappe.msgprint(\"Quota already added.\")\n                return\n        except AttributeError:\n            pass  # If 'quota_added' does not exist, proceed to add quota\n\n        if not doc.plans:\n            # frappe.msgprint(\"No plans found in the subscription.\")\n            return\n\n        # Process each plan in the subscription\n        for plan_doc in doc.plans:\n            plan = plan_doc.plan\n            qty = plan_doc.qty or 1\n\n            # Fetch the subscription plan details\n            try:\n                subscription_plan_doc = frappe.get_doc(\"Subscription Plan\", plan)\n            except frappe.DoesNotExistError:\n                return\n\n            # Define quota fields with their service names and corresponding hours\n            quota_fields = {\n                'custom_total_hrs': 'ساعات الاستشارة',\n                'custom_total_hrs_legal_services': 'ساعات الخدمات القانونية',\n                'custom_total_hrs_cases': 'ساعات القضايا'\n            }\n\n            # Add quota details from the subscription plan to the subscription\n            for fieldname, service_name in quota_fields.items():\n                hrs = subscription_plan_doc.get(fieldname, 0)\n                if hrs:\n                    total_hrs = int(hrs) * int(qty)\n                    # frappe.msgprint(f\"Quota field: {fieldname}, Hours: {total_hrs}\")\n\n                    # Check if quota for the service already exists\n                    existing_quota = None\n                    for q in doc.custom_quota:\n                        if q.service_name == service_name:\n                            existing_quota = q\n                            break\n\n                    if not existing_quota:\n                        doc.append('custom_quota', {\n                            'service_name': service_name,\n                            'hrs': total_hrs\n                        })\n                        # frappe.msgprint(f\"Added quota: {service_name} with hours {total_hrs}\")\n                    else:\n                        existing_quota.hrs = int(existing_quota.hrs) + total_hrs\n                        # frappe.msgprint(f\"Updated quota: {service_name} with additional hours {total_hrs}\")\n\n        # Save the subscription document with updated quota details\n        doc.quota_added = True  # Mark as quota added\n        doc.save()\n        # frappe.msgprint(f\"Quota details added successfully to subscription: {doc.name}\")\n\n    except Exception as e:\n        # Log error message\n        frappe.log_error(message=f\"Error adding quota. Error: {str(e)}\", title=\"Add Quota Error\")\n        # frappe.msgprint(f\"Error adding quota: {str(e)}\")\n\n# Example of how you would call this function:\nadd_quota_to_subscription(doc)\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-28 17:48:41.714593",
  "module": "Lsc Api",
  "name": "print subscription plan",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Client Transactions",
  "script": "def print_doc(doc):\r\n    try:\r\n        # Convert doc to a dictionary\r\n        doc_dict = doc.as_dict()\r\n\r\n        # Print the entire document\r\n        frappe.msgprint(f\"Document: {doc_dict}\")\r\n\r\n    except Exception as e:\r\n        # Handle exceptions\r\n        frappe.msgprint(f\"An error occurred: {str(e)}\")\r\n\r\nprint_doc(doc)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 1,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-28 17:48:41.782822",
  "module": "Lsc Api",
  "name": "Client Transactions",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Client Transactions",
  "script": "# def handle_client_transaction(doc):\r\n#     try:\r\n#         # Step 1: Fetch the subscription for the client\r\n#         frappe.msgprint(f\"Fetching subscription for client: {doc.client}\")\r\n#         subscription = frappe.get_doc(\"Subscription\", {\"party\": doc.client})\r\n#         frappe.msgprint(f\"Fetched subscription: {subscription.as_dict()}\")\r\n\r\n#         # Step 2: Check if the subscription has a plan\r\n#         frappe.msgprint(f\"Checking subscription plan for client: {doc.client}\")\r\n#         if not subscription.get('plans'):\r\n#             frappe.throw(f\"No subscription plan found for the client '{doc.client}'.\")\r\n\r\n#         plan_details = subscription.get('plans')\r\n#         if not plan_details or len(plan_details) == 0:\r\n#             frappe.throw(f\"No subscription plan details found for the client '{doc.client}'.\")\r\n\r\n#         # Assuming there is only one plan per subscription for simplicity\r\n#         plan_name = plan_details[0].get('plan')\r\n#         frappe.msgprint(f\"Subscription plan for client: {plan_name}\")\r\n\r\n#         # Step 3: Fetch the service settings from Plans Setting\r\n#         frappe.msgprint(\"Fetching Plans Setting\")\r\n#         plans_setting = frappe.get_doc(\"Plans Setting\", \"Plans Setting\")\r\n#         frappe.msgprint(f\"Fetched Plans Setting: {plans_setting.as_dict()}\")\r\n\r\n#         # Step 4: Get the item hours mapping from Plans Setting\r\n#         frappe.msgprint(\"Creating item hours mapping\")\r\n#         item_hours_mapping = {entry.service_name: entry.hrs for entry in plans_setting.service_settings}\r\n#         frappe.msgprint(f\"Item hours mapping: {item_hours_mapping}\")\r\n\r\n#         # Step 5: Get the item name from the client transaction\r\n#         item_name = doc.item\r\n#         frappe.msgprint(f\"Client transaction item: {item_name}\")\r\n\r\n#         # Step 6: Check if the item exists in the item_hours_mapping\r\n#         if item_name in item_hours_mapping:\r\n#             item_hours_required = item_hours_mapping[item_name]\r\n#             frappe.msgprint(f\"Item '{item_name}' found in Plans Setting. Hours required: {item_hours_required}\")\r\n#         else:\r\n#             frappe.throw(f\"Item '{item_name}' not found in the Plans Setting.\")\r\n\r\n#         # Step 7: Check the quota in the subscription\r\n#         frappe.msgprint(\"Checking quota in subscription\")\r\n#         service_quota = None\r\n#         for quota in subscription.custom_quota:\r\n#             if quota.service_name == item_name:\r\n#                 service_quota = quota\r\n#                 break\r\n#         frappe.msgprint(f\"Service quota: {service_quota}\")\r\n\r\n#         # Step 8: If not found in quota, check in allowed services of the subscription plan\r\n#         if not service_quota:\r\n#             frappe.msgprint(f\"Fetching subscription plan: {plan_name}\")\r\n#             subscription_plan = frappe.get_doc(\"Subscription Plan\", plan_name)\r\n#             frappe.msgprint(f\"Fetched subscription plan: {subscription_plan.as_dict()}\")\r\n\r\n#             for allowed_service in subscription_plan.custom_allowed_services:\r\n#                 if allowed_service.service_name == item_name:\r\n#                     # Create a new quota entry in subscription\r\n#                     total_hours_field = f\"custom_total_hrs\"\r\n#                     frappe.msgprint(f\"Checking for total hours field: {total_hours_field}\")\r\n#                     total_hours = None\r\n#                     if item_name == \"استشارة عن بعد\":\r\n#                         total_hours = subscription_plan.custom_total_hrs\r\n#                     elif item_name == \"استشارات كتابية\":\r\n#                         total_hours = subscription_plan.custom_total_hrs_legal_services\r\n#                     elif item_name == \"قضايا\":\r\n#                         total_hours = subscription_plan.custom_total_hrs_cases\r\n#                     else:\r\n#                         frappe.throw(f\"Custom hours not defined for service '{item_name}' in the Subscription Plan.\")\r\n\r\n#                     if total_hours:\r\n#                         frappe.msgprint(f\"Found total hours for '{item_name}': {total_hours}\")\r\n#                         service_quota = {\r\n#                             \"service_name\": item_name,\r\n#                             \"hrs\": total_hours\r\n#                         }\r\n#                         subscription.append(\"custom_quota\", service_quota)\r\n#                         subscription.save()\r\n#                         frappe.msgprint(f\"Updated subscription with new quota: {service_quota}\")\r\n#                         break\r\n\r\n#         # if not service_quota:\r\n#         #     frappe.throw(f\"No quota found for service '{item_name}' in the subscription or allowed services.\")\r\n\r\n#         # # Step 9: Check if there are enough hours in the quota\r\n#         # frappe.msgprint(f\"Checking if there are enough hours for service '{item_name}'\")\r\n#         # if int(service_quota.hrs) < int(item_hours_required):\r\n#         #     frappe.throw(f\"Not enough hours for service '{item_name}'. Required: {item_hours_required}, Available: {service_quota.hrs}\")\r\n\r\n#         # # Step 10: Deduct the hours from the quota\r\n#         # frappe.msgprint(f\"Deducting {item_hours_required} hours from the quota for service '{item_name}'\")\r\n#         # service_quota.hrs = int(service_quota.hrs) - int(item_hours_required)\r\n\r\n#         # # Step 11: Save the updated subscription\r\n#         # frappe.msgprint(f\"Saving updated subscription: {subscription.as_dict()}\")\r\n#         # subscription.save()\r\n\r\n#         # # Step 12: Log success message\r\n#         # frappe.msgprint(f\"Processed client transaction for item '{item_name}'. Deducted {item_hours_required} hours from the quota.\")\r\n\r\n#     except Exception as e:\r\n#         # Log error message\r\n#         frappe.log_error(message=f\"Error processing client transaction. Error: {str(e)}\", title=\"Process Client Transaction Error\")\r\n#         frappe.msgprint(f\"Error processing client transaction: {str(e)}\")\r\n\r\n# # Assuming 'doc' is provided as input\r\n# handle_client_transaction(doc)\r\n\r\ndef handle_client_transaction(doc):\r\n    try:\r\n        # Step 1: Fetch the subscription for the client\r\n        frappe.msgprint(f\"Fetching subscription for client: {doc.client}\")\r\n        subscription = frappe.get_doc(\"Subscription\", {\"party\": doc.client})\r\n        frappe.msgprint(f\"Fetched subscription: {subscription.as_dict()}\")\r\n\r\n        # Step 2: Check if the subscription has a plan\r\n        frappe.msgprint(f\"Checking subscription plan for client: {doc.client}\")\r\n        if not subscription.get('plans'):\r\n            frappe.throw(f\"No subscription plan found for the client '{doc.client}'.\")\r\n\r\n        plan_details = subscription.get('plans')\r\n        if not plan_details or len(plan_details) == 0:\r\n            frappe.throw(f\"No subscription plan details found for the client '{doc.client}'.\")\r\n\r\n        # Assuming there is only one plan per subscription for simplicity\r\n        plan_name = plan_details[0].get('plan')\r\n        frappe.msgprint(f\"Subscription plan for client: {plan_name}\")\r\n\r\n        # Step 3: Fetch the service settings from Plans Setting\r\n        frappe.msgprint(\"Fetching Plans Setting\")\r\n        plans_setting = frappe.get_doc(\"Plans Setting\", \"Plans Setting\")\r\n        frappe.msgprint(f\"Fetched Plans Setting: {plans_setting.as_dict()}\")\r\n\r\n        # Step 4: Get the item hours mapping from Plans Setting\r\n        frappe.msgprint(\"Creating item hours mapping\")\r\n        item_hours_mapping = {entry.service_name: entry.hrs for entry in plans_setting.service_settings}\r\n        frappe.msgprint(f\"Item hours mapping: {item_hours_mapping}\")\r\n\r\n        # Step 5: Get the Transaction Type from the client transaction\r\n        transaction_type = doc.transaction_type\r\n        frappe.msgprint(f\"Client transaction type: {transaction_type}\")\r\n\r\n        # Step 6: Get the corresponding service name based on Transaction Type\r\n        if transaction_type == \"Case\":\r\n            service_name = \"Cases Hrs\"\r\n        elif transaction_type == \"Consultation\":\r\n            service_name = \"Consultation Hrs\"\r\n        elif transaction_type == \"Legal Service\":\r\n            service_name = \"Legal Service Hrs\"\r\n        else:\r\n            frappe.throw(f\"Invalid Transaction Type: {transaction_type}\")\r\n            \r\n        frappe.msgprint(f\"service_name: {service_name}\")\r\n\r\n            \r\n\r\n        # Step 7: Get the quota for the service from the subscription plan\r\n        service_quota = None\r\n        for quota in subscription.custom_quota:\r\n                       \r\n\r\n            if quota.service_name == service_name:\r\n                service_quota = quota\r\n                break\r\n\r\n            frappe.msgprint(f\"subscription.custom_quota: {subscription.custom_quota}\")\r\n\r\n        if not service_quota:\r\n            frappe.throw(f\"No quota found for service '{service_name}' in the subscription.\")\r\n            \r\n            \r\n\r\n        # # Step 8: Check if there are enough hours in the quota\r\n        # item_hours_required = item_hours_mapping.get(service_name)\r\n        # if item_hours_required is None:\r\n        #     frappe.throw(f\"No hour requirement found for service '{service_name}'.\")\r\n\r\n        # frappe.msgprint(f\"Item '{service_name}' found in Plans Setting. Hours required: {item_hours_required}\")\r\n\r\n        # if int(service_quota[\"hrs\"]) < int(item_hours_required):\r\n        #     frappe.throw(f\"Not enough hours for service '{service_name}'. Required: {item_hours_required}, Available: {service_quota['hrs']}\")\r\n\r\n        # # Step 9: Deduct the hours from the quota\r\n        # frappe.msgprint(f\"Deducting {item_hours_required} hours from the quota for service '{service_name}'\")\r\n        # service_quota[\"hrs\"] = int(service_quota[\"hrs\"]) - int(item_hours_required)\r\n\r\n        # # Step 10: Save the updated subscription\r\n        # frappe.msgprint(f\"Saving updated subscription: {subscription.as_dict()}\")\r\n        # subscription.save()\r\n\r\n        # # Step 11: Log success message\r\n        # frappe.msgprint(f\"Processed client transaction for Transaction Type '{transaction_type}'. Deducted {item_hours_required} hours from the quota.\")\r\n\r\n    except Exception as e:\r\n        # Log error message\r\n        frappe.log_error(message=f\"Error processing client transaction. Error: {str(e)}\", title=\"Process Client Transaction Error\")\r\n        frappe.msgprint(f\"Error processing client transaction: {str(e)}\")\r\n\r\n# Assuming 'doc' is provided as input\r\nhandle_client_transaction(doc)\r\n",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-28 17:48:41.648255",
  "module": "Lsc Api",
  "name": "Update Subscription after add Legal Services",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Legal Services",
  "script": "def check_and_update_subscription(doc):\n    client_transaction = frappe.get_doc(\"Client Transactions\", doc.client_transaction)\n    client = client_transaction.client\n    \n    # Fetch active subscription for the client\n    subscription = frappe.get_all(\"Subscription\", \n                                  filters={\"party\": client, \"status\": \"Active\"}, \n                                  fields=[\"name\"])\n    \n    if not subscription:\n        frappe.throw(f\"No active subscription found for client {client}\")\n\n    subscription_name = subscription[0].name\n    subscription_doc = frappe.get_doc(\"Subscription\", subscription_name)\n\n    # Fetch subscription plan details\n    plan_name = subscription_doc.plans[0].plan\n    subscription_plan = frappe.get_doc(\"Subscription Plan\", plan_name)\n\n    # Check if item is in allowed services\n    allowed_services = [service.service_name for service in subscription_plan.custom_allowed_services]\n    if client_transaction.item not in allowed_services:\n        frappe.throw(f\"Service {client_transaction.item} is not allowed in the subscription plan\")\n\n    # Fetch hours required for the service from Plans Setting\n    plans_setting = frappe.get_doc(\"Plans Setting\", \"Plans Setting\")\n    service_settings = {setting.service_name: setting.hrs for setting in plans_setting.service_settings}\n    \n    if client_transaction.item not in service_settings:\n        frappe.throw(f\"Service {client_transaction.item} not found in Plans Setting\")\n    \n    required_hours = float(service_settings[client_transaction.item])\n    \n    # Check if enough hours are available in the subscription custom quota\n    legal_service_quota = None\n    for quota in subscription_doc.custom_quota:\n        if quota.service_name == \"ساعات الخدمات القانونية\":\n            legal_service_quota = quota\n            break\n\n    if not legal_service_quota:\n        frappe.throw(f\"No legal service hours quota found in the subscription\")\n\n    available_hours = float(legal_service_quota.hrs)\n    \n    if available_hours < required_hours:\n        frappe.throw(f\"Not enough hours available. Required: {required_hours}, Available: {available_hours}\")\n\n    # Deduct the hours from the quota and format as integer\n    updated_hours = int(available_hours - required_hours)\n    legal_service_quota.hrs = str(updated_hours)\n\n    # Update consumed hours\n    consumed_hours = float(legal_service_quota.consumed_hrs or 0)\n    legal_service_quota.consumed_hrs = str(int(consumed_hours + required_hours))\n\n    subscription_doc.save()\n\ncheck_and_update_subscription(doc)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-28 17:48:41.684505",
  "module": "Lsc Api",
  "name": "Update Subscription after add Consultations",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Consultations",
  "script": "def check_and_update_subscription(doc):\r\n    client_transaction = frappe.get_doc(\"Client Transactions\", doc.client_transaction)\r\n    client = client_transaction.client\r\n\r\n    # Fetch active subscription for the client\r\n    subscription = frappe.get_all(\"Subscription\", \r\n                                  filters={\"party\": client, \"status\": \"Active\"}, \r\n                                  fields=[\"name\"])\r\n    \r\n    if not subscription:\r\n        frappe.throw(f\"No active subscription found for client {client}\")\r\n\r\n    subscription_name = subscription[0].name\r\n    subscription_doc = frappe.get_doc(\"Subscription\", subscription_name)\r\n\r\n    # Fetch subscription plan details\r\n    plan_name = subscription_doc.plans[0].plan\r\n    subscription_plan = frappe.get_doc(\"Subscription Plan\", plan_name)\r\n\r\n    # Check if item is in allowed services\r\n    allowed_services = [service.service_name for service in subscription_plan.custom_allowed_services]\r\n    if client_transaction.item not in allowed_services:\r\n        frappe.throw(f\"Service {client_transaction.item} is not allowed in the subscription plan\")\r\n\r\n    # Fetch hours required for the service from Plans Setting\r\n    plans_setting = frappe.get_doc(\"Plans Setting\", \"Plans Setting\")\r\n    service_settings = {setting.service_name: setting.hrs for setting in plans_setting.service_settings}\r\n    \r\n    if client_transaction.item not in service_settings:\r\n        frappe.throw(f\"Service {client_transaction.item} not found in Plans Setting\")\r\n    \r\n    required_hours = float(service_settings[client_transaction.item])\r\n    \r\n    # Check if enough hours are available in the subscription custom quota\r\n    consultation_quota = None\r\n    for quota in subscription_doc.custom_quota:\r\n        if quota.service_name == \"ساعات الاستشارة\":\r\n            consultation_quota = quota\r\n            break\r\n\r\n    if not consultation_quota:\r\n        frappe.throw(f\"No consultation hours quota found in the subscription\")\r\n\r\n    available_hours = float(consultation_quota.hrs)\r\n    \r\n    if available_hours < required_hours:\r\n        frappe.throw(f\"Not enough hours available. Required: {required_hours}, Available: {available_hours}\")\r\n\r\n    # Deduct the hours from the quota and format as integer\r\n    updated_hours = int(available_hours - required_hours)\r\n    consultation_quota.hrs = str(updated_hours)\r\n\r\n    # Update consumed hours\r\n    consumed_hours = float(consultation_quota.consumed_hrs or 0)\r\n    consultation_quota.consumed_hrs = str(int(consumed_hours + required_hours))\r\n\r\n    subscription_doc.save()\r\ncheck_and_update_subscription(doc)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-08-28 17:48:41.742023",
  "module": "Lsc Api",
  "name": "Update Subscription after add Cases",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Cases",
  "script": "def check_and_update_subscription(doc):\n    client_transaction = frappe.get_doc(\"Client Transactions\", doc.client_transaction)\n    client = client_transaction.client\n\n    # Fetch active subscription for the client\n    subscription = frappe.get_all(\"Subscription\", \n                                  filters={\"party\": client, \"status\": \"Active\"}, \n                                  fields=[\"name\"])\n    \n    if not subscription:\n        frappe.throw(f\"No active subscription found for client {client}\")\n\n    subscription_name = subscription[0].name\n    subscription_doc = frappe.get_doc(\"Subscription\", subscription_name)\n\n    # Fetch subscription plan details\n    plan_name = subscription_doc.plans[0].plan\n    subscription_plan = frappe.get_doc(\"Subscription Plan\", plan_name)\n\n    # Check if item is in allowed services\n    allowed_services = [service.service_name for service in subscription_plan.custom_allowed_services]\n\n    if client_transaction.item not in allowed_services:\n        frappe.throw(f\"Service {client_transaction.item} is not allowed in the subscription plan\")\n\n    # Fetch hours required for the service from Plans Setting\n    plans_setting = frappe.get_doc(\"Plans Setting\", \"Plans Setting\")\n    service_settings = {setting.service_name: setting.hrs for setting in plans_setting.service_settings}\n    \n    if client_transaction.item not in service_settings:\n        frappe.throw(f\"Service {client_transaction.item} not found in Plans Setting\")\n    \n    required_hours = float(service_settings[client_transaction.item])\n    \n    # Check if enough hours are available in the subscription custom quota\n    cases_quota = None\n    for quota in subscription_doc.custom_quota:\n        if quota.service_name == \"ساعات القضايا\":\n            cases_quota = quota\n            break\n\n    if not cases_quota:\n        frappe.throw(f\"No cases hours quota found in the subscription\")\n\n    available_hours = float(cases_quota.hrs)\n    \n    if available_hours < required_hours:\n        frappe.throw(f\"Not enough hours available. Required: {required_hours}, Available: {available_hours}\")\n\n    # Deduct the hours from the quota and format as integer\n    updated_hours = int(available_hours - required_hours)\n    cases_quota.hrs = str(updated_hours)\n\n    # Update consumed hours\n    consumed_hours = float(cases_quota.consumed_hrs or 0)\n    cases_quota.consumed_hrs = str(int(consumed_hours + required_hours))\n\n    subscription_doc.save()\n\ncheck_and_update_subscription(doc)",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "After Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-09-02 20:58:19.142270",
  "module": "Lsc Api",
  "name": "Update Subscription after add Case Study",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Case Study",
  "script": "def check_and_update_subscription(doc):\n    client_transaction = frappe.get_doc(\"Client Transactions\", doc.client_transaction)\n    client = client_transaction.client\n\n    # Fetch active subscription for the client\n    subscription = frappe.get_all(\"Subscription\", \n                                  filters={\"party\": client, \"status\": \"Active\"}, \n                                  fields=[\"name\"])\n    \n    if not subscription:\n        frappe.throw(f\"No active subscription found for client {client}\")\n\n    subscription_name = subscription[0].name\n    subscription_doc = frappe.get_doc(\"Subscription\", subscription_name)\n\n    # Fetch subscription plan details\n    plan_name = subscription_doc.plans[0].plan\n    subscription_plan = frappe.get_doc(\"Subscription Plan\", plan_name)\n\n    # Check if item is in allowed services\n    allowed_services = [service.service_name for service in subscription_plan.custom_allowed_services]\n\n    if client_transaction.item not in allowed_services:\n        frappe.throw(f\"Service {client_transaction.item} is not allowed in the subscription plan\")\n\n    # Fetch hours required for the service from Plans Setting\n    plans_setting = frappe.get_doc(\"Plans Setting\", \"Plans Setting\")\n    service_settings = {setting.service_name: setting.hrs for setting in plans_setting.service_settings}\n    \n    if client_transaction.item not in service_settings:\n        frappe.throw(f\"Service {client_transaction.item} not found in Plans Setting\")\n    \n    required_hours = float(service_settings[client_transaction.item])\n    \n    # Check if enough hours are available in the subscription custom quota\n    cases_quota = None\n    for quota in subscription_doc.custom_quota:\n        if quota.service_name == \"ساعات القضايا\":\n            cases_quota = quota\n            break\n\n    if not cases_quota:\n        frappe.throw(f\"No cases hours quota found in the subscription\")\n\n    available_hours = float(cases_quota.hrs)\n    \n    if available_hours < required_hours:\n        frappe.throw(f\"Not enough hours available. Required: {required_hours}, Available: {available_hours}\")\n\n    # Deduct the hours from the quota and format as integer\n    updated_hours = int(available_hours - required_hours)\n    cases_quota.hrs = str(updated_hours)\n\n    # Update consumed hours\n    consumed_hours = float(cases_quota.consumed_hrs or 0)\n    cases_quota.consumed_hrs = str(int(consumed_hours + required_hours))\n\n    subscription_doc.save()\n\ncheck_and_update_subscription(doc)",
  "script_type": "DocType Event"
 }
]